{"version":3,"sources":["useDirection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Directions","createTable","to","R","getRandomPosition","widthCanvas","heightCanvas","Math","floor","random","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","_React$useState3","_React$useState4","_React$useState5","_React$useState6","foodPosition","setFoodPosition","_React$useState7","_React$useState8","foodCounter","setFoodCounter","_React$useState9","_React$useState10","specialFood","setSpecialFood","_React$useState11","_React$useState12","specialFoodPosition","setSpecialFoodPosition","_React$useState13","_React$useState14","points","setPoints","_React$useState15","_React$useState16","speed","_React$useState17","_React$useState18","table","setTable","intervalId","useRef","current","_React$useState19","_React$useState20","pixelSize","_React$useState21","_React$useState22","snake","setSnake","_useDirection","initialDirection","debounceTime","arguments","length","undefined","direction","setDirection","keys","useMemo","37","curDir","RIGHT","LEFT","38","DOWN","UP","39","40","_useDebouncedCallback","useDebouncedCallback","useCallback","keyCode","console","log","handleKeyPress","useDirection","_useDirection2","currentDirection","useEffect","newTable","canvas","getRow","pos","getNextRow","dir","row","moves","updateFood","newFoodPosition","getNextFoodPosition","includes","window","setTimeout","clearInterval","updateGame","_updateSnake","snakeHead","ateFood","ateSpecialFood","snakeBodyOffset","snakeBody","newSnakeHead","alert","location","reload","newSnake","updateSnake","_updateSnake2","callback","callbackRef","loop","frameRef","requestAnimationFrame","cb","useLayoutEffect","cancelAnimationFrame","useAnimationFrame","ctx","getContext","forEach","_","index","fillStyle","fillRect","react_default","a","createElement","style","display","flexDirection","tabIndex","ref","width","height","onKeyDown","e","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f59976e.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDebouncedCallback } from \"use-debounce\";\n\nexport enum Directions {\n  UP = \"UP\",\n  DOWN = \"DOWN\",\n  LEFT = \"LEFT\",\n  RIGHT = \"RIGHT\"\n}\n\nexport function useDirection(\n  initialDirection: Directions,\n  debounceTime = 1000 / 20\n): [Directions, ((keyCode: number) => void)] {\n  const [direction, setDirection] = React.useState(initialDirection);\n\n  const keys = React.useMemo(\n    () => ({\n      37: (curDir: Directions) =>\n        curDir !== Directions.RIGHT && setDirection(Directions.LEFT),\n      38: (curDir: Directions) =>\n        curDir !== Directions.DOWN && setDirection(Directions.UP),\n      39: (curDir: Directions) =>\n        curDir !== Directions.LEFT && setDirection(Directions.RIGHT),\n      40: (curDir: Directions) =>\n        curDir !== Directions.UP && setDirection(Directions.DOWN)\n    }),\n    []\n  ) as {\n    [key: number]: (curDir: Directions) => void;\n  };\n\n  const [handleKeyPress] = useDebouncedCallback(\n    React.useCallback(\n      (keyCode: number) => {\n        console.log(keyCode);\n        if (keys[keyCode]) {\n          keys[keyCode](direction);\n        }\n      },\n      [direction]\n    ),\n    debounceTime\n  );\n\n  return [direction, handleKeyPress];\n}\n","import React, { useCallback } from \"react\";\nimport \"./App.css\";\nimport * as R from \"ramda\";\nimport { useDirection, Directions } from \"./useDirection\";\n\nconst createTable = (to: number) => R.range(0, to);\n\n// enum Directions {\n//   UP = \"UP\",\n//   DOWN = \"DOWN\",\n//   LEFT = \"LEFT\",\n//   RIGHT = \"RIGHT\"\n// }\n\nconst useAnimationFrame = (callback: any) => {\n  let callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  const loop = () => {\n    frameRef.current = requestAnimationFrame(loop);\n    const cb = callbackRef.current;\n    cb();\n  };\n\n  let frameRef = React.useRef() as React.MutableRefObject<number>;\n\n  React.useLayoutEffect(() => {\n    frameRef.current = requestAnimationFrame(loop);\n    return () => {\n      return cancelAnimationFrame(frameRef.current);\n    };\n  }, []);\n};\n\n// type Moves = {\n//   [key: Directions]: (pos: number) => number;\n// };\n\nconst getRandomPosition = (widthCanvas: number, heightCanvas: number) =>\n  Math.floor(Math.random() * widthCanvas * heightCanvas);\n\nconst App: React.FC = () => {\n  // const [width, setWidth] = React.useState(100);\n  // const [height, setHeight] = React.useState(100);\n  const [widthCanvas, setWidthCanvas] = React.useState(25);\n  const [heightCanvas, setHeightCanvas] = React.useState(25);\n\n  const [foodPosition, setFoodPosition] = React.useState(\n    getRandomPosition(widthCanvas, heightCanvas)\n  );\n  const [foodCounter, setFoodCounter] = React.useState(0);\n  const [specialFood, setSpecialFood] = React.useState(false);\n  const [specialFoodPosition, setSpecialFoodPosition] = React.useState(\n    getRandomPosition(widthCanvas, heightCanvas)\n  );\n\n  const [points, setPoints] = React.useState(0);\n  const [speed, setSpeed] = React.useState(9);\n\n  const [table, setTable] = React.useState(\n    createTable(widthCanvas * heightCanvas)\n  );\n\n  let intervalId = React.useRef(0).current;\n\n  const [pixelSize, setPixelSize] = React.useState(20);\n  const [snake, setSnake] = React.useState([1]);\n\n  const [currentDirection, handleKeyPress] = useDirection(Directions.LEFT);\n  const updateRate = 1000 / 60;\n  const positionUpdateRate = 1000 / 20;\n\n  React.useEffect(() => {\n    const newTable = createTable(widthCanvas * heightCanvas);\n    setTable(newTable);\n  }, [widthCanvas, heightCanvas]);\n\n  const canvas = React.useRef(null) as React.RefObject<HTMLCanvasElement>;\n\n  const getRow = (pos: number) => Math.floor(pos / widthCanvas);\n  const getNextRow = (dir: Directions, row: number) => {\n    if (dir === Directions.DOWN) return row === heightCanvas - 1 ? 0 : row + 1;\n    return row === 0 ? heightCanvas - 1 : row - 1;\n  };\n  const moves = {\n    UP: (pos: number) =>\n      (pos % widthCanvas) +\n      getNextRow(currentDirection, getRow(pos)) * widthCanvas,\n    DOWN: (pos: number) =>\n      (pos % widthCanvas) +\n      getNextRow(currentDirection, getRow(pos)) * widthCanvas,\n    RIGHT: (pos: number) =>\n      ((pos + 1) % widthCanvas) + getRow(pos) * widthCanvas,\n    LEFT: (pos: number) =>\n      pos % widthCanvas === 0\n        ? widthCanvas - 1 + getRow(pos) * widthCanvas\n        : pos - 1\n  };\n\n  const getNextFoodPosition = (snake: number[]): number => {\n    const newFoodPosition = Math.floor(Math.random() * table.length);\n\n    if (snake.includes(newFoodPosition)) {\n      return getNextFoodPosition(snake);\n    }\n\n    return newFoodPosition;\n  };\n\n  const updateFood = React.useCallback(() => {\n    const newFoodPosition = getNextFoodPosition(snake);\n    setFoodPosition(newFoodPosition);\n    if ((foodCounter + 1) % 2 === 0 && !specialFood) {\n      setSpecialFood(true);\n      setSpecialFoodPosition(getRandomPosition(widthCanvas, heightCanvas));\n    }\n    setFoodCounter(foodCounter + 1);\n  }, [snake]);\n\n  React.useEffect(() => {\n    if (specialFood) {\n      intervalId = window.setTimeout(() => {\n        setSpecialFood(false);\n      }, 10000);\n    }\n\n    return () => clearInterval(intervalId);\n  }, [specialFood]);\n\n  const updateSnake = () => {\n    const snakeHead = snake[0];\n    const ateFood = snakeHead === foodPosition;\n    const ateSpecialFood = specialFood && snakeHead === specialFoodPosition;\n    const snakeBodyOffset = ateFood ? 0 : -1;\n\n    const snakeBody = R.slice(0, snake.length + snakeBodyOffset, snake);\n\n    const newSnakeHead = moves[currentDirection](snakeHead);\n    if (snakeBody.includes(newSnakeHead)) {\n      alert(\"MORREU!\");\n      window.location.reload();\n    }\n    const newSnake = R.concat([newSnakeHead], snakeBody);\n    setSnake(newSnake);\n\n    return [ateFood, ateSpecialFood];\n  };\n\n  const updateGame = () => {\n    let [ateFood, ateSpecialFood] = updateSnake();\n    if (ateFood) {\n      setPoints(points + speed);\n      updateFood();\n    }\n\n    if (ateSpecialFood) {\n      setPoints(points + 181);\n      setSpecialFood(false);\n    }\n\n    // setSnake(R.map<number, number>(moves[direction])(snake))\n  };\n\n  // ATUALIZAR POSIÇÃO\n  React.useEffect(() => {\n    setTimeout(updateGame, positionUpdateRate);\n  }, [snake]);\n\n  // React.useEffect(() => {\n  //   requestAnimationFrame(paint);\n  //   // setInterval(updateFrame, updateRate);\n  // }, []);\n\n  const paint = React.useCallback(() => {\n    // console.log(\"called\");\n    // const ctx = canvas.current;\n    if (canvas.current) {\n      const ctx = canvas.current.getContext(\"2d\");\n      if (ctx) {\n        table.forEach((_, index) => {\n          ctx.fillStyle = snake.includes(index) ? \"white\" : \"black\";\n          ctx.fillRect(\n            // FUCK CANCAS X Y\n            pixelSize * (index % widthCanvas),\n            pixelSize * Math.floor(index / widthCanvas),\n            pixelSize,\n            pixelSize\n          );\n        });\n\n        // render food\n        ctx.fillStyle = \"white\";\n        ctx.fillRect(\n          // FUCK CANCAS X Y\n          pixelSize * (foodPosition % widthCanvas),\n          pixelSize * Math.floor(foodPosition / widthCanvas),\n          pixelSize,\n          pixelSize\n        );\n\n        if (specialFood) {\n          ctx.fillStyle = \"red\";\n          ctx.fillRect(\n            pixelSize * (specialFoodPosition % widthCanvas),\n            pixelSize * Math.floor(specialFoodPosition / widthCanvas),\n            pixelSize,\n            pixelSize\n          );\n        }\n      }\n    }\n\n    // paint();\n  }, [snake]);\n\n  // ATUALIZAR JOGO\n  useAnimationFrame(paint);\n\n  // React.useEffect(() => {\n  //   setWidth(window.innerWidth);\n  //   setHeight(window.innerHeight);\n  // }, []);\n\n  // <div\n  // onKeyDown={handleKeyPress}\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n      <canvas\n        tabIndex={0}\n        ref={canvas}\n        width={widthCanvas * pixelSize}\n        height={heightCanvas * pixelSize}\n        onKeyDown={e => handleKeyPress(e.keyCode)}\n      />\n      <h1>{points}</h1>\n    </div>\n  );\n};\n// /</canvas></div>\n// {/*  */}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}